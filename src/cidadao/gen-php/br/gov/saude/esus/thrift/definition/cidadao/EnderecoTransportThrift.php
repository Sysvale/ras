<?php
namespace br\gov\saude\esus\thrift\definition\cidadao;

/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class EnderecoTransportThrift
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'bairroNome',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'bairroDne',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'localidadeCep',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'localidadeDne',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'localidadeIbge',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'complemento',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'logradouro',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'logradouroDne',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'numero',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'pontoReferencia',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'semNumero',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'ufSigla',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'area',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'microArea',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $bairroNome = null;
    /**
     * @var string
     */
    public $bairroDne = null;
    /**
     * @var string
     */
    public $localidadeCep = null;
    /**
     * @var string
     */
    public $localidadeDne = null;
    /**
     * @var string
     */
    public $localidadeIbge = null;
    /**
     * @var string
     */
    public $complemento = null;
    /**
     * @var string
     */
    public $logradouro = null;
    /**
     * @var string
     */
    public $logradouroDne = null;
    /**
     * @var string
     */
    public $numero = null;
    /**
     * @var string
     */
    public $pontoReferencia = null;
    /**
     * @var bool
     */
    public $semNumero = null;
    /**
     * @var string
     */
    public $ufSigla = null;
    /**
     * @var string
     */
    public $area = null;
    /**
     * @var string
     */
    public $microArea = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['bairroNome'])) {
                $this->bairroNome = $vals['bairroNome'];
            }
            if (isset($vals['bairroDne'])) {
                $this->bairroDne = $vals['bairroDne'];
            }
            if (isset($vals['localidadeCep'])) {
                $this->localidadeCep = $vals['localidadeCep'];
            }
            if (isset($vals['localidadeDne'])) {
                $this->localidadeDne = $vals['localidadeDne'];
            }
            if (isset($vals['localidadeIbge'])) {
                $this->localidadeIbge = $vals['localidadeIbge'];
            }
            if (isset($vals['complemento'])) {
                $this->complemento = $vals['complemento'];
            }
            if (isset($vals['logradouro'])) {
                $this->logradouro = $vals['logradouro'];
            }
            if (isset($vals['logradouroDne'])) {
                $this->logradouroDne = $vals['logradouroDne'];
            }
            if (isset($vals['numero'])) {
                $this->numero = $vals['numero'];
            }
            if (isset($vals['pontoReferencia'])) {
                $this->pontoReferencia = $vals['pontoReferencia'];
            }
            if (isset($vals['semNumero'])) {
                $this->semNumero = $vals['semNumero'];
            }
            if (isset($vals['ufSigla'])) {
                $this->ufSigla = $vals['ufSigla'];
            }
            if (isset($vals['area'])) {
                $this->area = $vals['area'];
            }
            if (isset($vals['microArea'])) {
                $this->microArea = $vals['microArea'];
            }
        }
    }

    public function getName()
    {
        return 'EnderecoTransportThrift';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bairroNome);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->bairroDne);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->localidadeCep);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->localidadeDne);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->localidadeIbge);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->complemento);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->logradouro);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->logradouroDne);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->numero);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pontoReferencia);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->semNumero);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ufSigla);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->area);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->microArea);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('EnderecoTransportThrift');
        if ($this->bairroNome !== null) {
            $xfer += $output->writeFieldBegin('bairroNome', TType::STRING, 1);
            $xfer += $output->writeString($this->bairroNome);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bairroDne !== null) {
            $xfer += $output->writeFieldBegin('bairroDne', TType::STRING, 2);
            $xfer += $output->writeString($this->bairroDne);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->localidadeCep !== null) {
            $xfer += $output->writeFieldBegin('localidadeCep', TType::STRING, 3);
            $xfer += $output->writeString($this->localidadeCep);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->localidadeDne !== null) {
            $xfer += $output->writeFieldBegin('localidadeDne', TType::STRING, 4);
            $xfer += $output->writeString($this->localidadeDne);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->localidadeIbge !== null) {
            $xfer += $output->writeFieldBegin('localidadeIbge', TType::STRING, 5);
            $xfer += $output->writeString($this->localidadeIbge);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->complemento !== null) {
            $xfer += $output->writeFieldBegin('complemento', TType::STRING, 6);
            $xfer += $output->writeString($this->complemento);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->logradouro !== null) {
            $xfer += $output->writeFieldBegin('logradouro', TType::STRING, 7);
            $xfer += $output->writeString($this->logradouro);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->logradouroDne !== null) {
            $xfer += $output->writeFieldBegin('logradouroDne', TType::STRING, 8);
            $xfer += $output->writeString($this->logradouroDne);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->numero !== null) {
            $xfer += $output->writeFieldBegin('numero', TType::STRING, 9);
            $xfer += $output->writeString($this->numero);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pontoReferencia !== null) {
            $xfer += $output->writeFieldBegin('pontoReferencia', TType::STRING, 10);
            $xfer += $output->writeString($this->pontoReferencia);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->semNumero !== null) {
            $xfer += $output->writeFieldBegin('semNumero', TType::BOOL, 11);
            $xfer += $output->writeBool($this->semNumero);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ufSigla !== null) {
            $xfer += $output->writeFieldBegin('ufSigla', TType::STRING, 12);
            $xfer += $output->writeString($this->ufSigla);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->area !== null) {
            $xfer += $output->writeFieldBegin('area', TType::STRING, 13);
            $xfer += $output->writeString($this->area);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->microArea !== null) {
            $xfer += $output->writeFieldBegin('microArea', TType::STRING, 14);
            $xfer += $output->writeString($this->microArea);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
